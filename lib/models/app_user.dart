import 'project.dart';
import 'progress_history.dart';
// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @HiveType –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏ @HiveField –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
import 'package:hive/hive.dart';

part 'app_user.g.dart'; // –§–∞–π–ª –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

@HiveType(typeId: 0) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–∏–ø–∞
class AppUser {
  @HiveField(0)
  final String username;

  @HiveField(1)
  final String email;

  @HiveField(2)
  final List<Project> projects;

  @HiveField(3)
  final List<dynamic> progressHistory;

// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

  AppUser({
    required this.username,
    required this.email,
    required this.projects,
    required this.progressHistory,
  });

  // –í models/app_user.dart
  Map<String, dynamic> toFirestore() {
    // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ null –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    final migratedHistory = progressHistory.map((item) {
      if (item is ProgressHistory) {
        return item.toFirestore();
      }
      return item;
    }).toList();

    return {
      'username': username,
      'email': email,
      'projects': projects.map((p) => p.toFirestore()).toList(),
      'progressHistory': migratedHistory,
    };
  }

  static AppUser fromFirestore(Map<String, dynamic> data) {
    print('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data['username'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    List<Project> projects = [];
    if (data['projects'] != null && data['projects'] is List) {
      try {
        projects = (data['projects'] as List).map<Project>((p) {
          if (p is Map<String, dynamic>) {
            return Project.fromFirestore(p);
          } else if (p is Project) {
            return p;
          } else {
            return Project(name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', tasks: []);
          }
        }).toList();
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: $e');
        projects = [];
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    List<dynamic> progressHistory = [];
    if (data['progressHistory'] != null && data['progressHistory'] is List) {
      progressHistory = (data['progressHistory'] as List).map((item) {
        try {
          if (item is Map<String, dynamic>) {
            return ProgressHistory.fromFirestore(item);
          } else {
            return item;
          }
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: $e');
          return item;
        }
      }).toList();
    }

    print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ ${progressHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏');

    return AppUser(
      username: data['username']?.toString() ?? '',
      email: data['email']?.toString() ?? '',
      projects: projects,
      progressHistory: progressHistory,
    );
  }

  static AppUser empty() => AppUser(
    username: '',
    email: '',
    projects: <Project>[],
    progressHistory: [],
  );
}