// utils/storage_helper.dart - –û–ë–ù–û–í–ò–ú –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class StorageHelper {
  static const String _projectsKey = 'saved_projects';

  static Future<bool> saveProjects(List<Map<String, dynamic>> projects) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = jsonEncode(projects);
      final success = await prefs.setString(_projectsKey, jsonString);

      print('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤');
      print('üìù –ö–ª—é—á: $_projectsKey');
      print('‚úÖ –£—Å–ø–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $success');

      // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
      final saved = prefs.getString(_projectsKey);
      print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${saved != null ? "–î–ê–ù–ù–´–ï –ï–°–¢–¨" : "–î–ê–ù–ù–´–• –ù–ï–¢"}');

      return success;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
      return false;
    }
  }

  static Future<List<Map<String, dynamic>>> loadProjects() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_projectsKey);

      print('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É: $_projectsKey');
      print('üìÑ –î–∞–Ω–Ω—ã–µ: $jsonString');

      if (jsonString != null && jsonString.isNotEmpty) {
        final List<dynamic> jsonList = jsonDecode(jsonString);
        print('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jsonList.length} –ø—Ä–æ–µ–∫—Ç–æ–≤');
        return jsonList.cast<Map<String, dynamic>>();
      } else {
        print('üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e');
    }

    return [];
  }

  static Future<void> clearData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_projectsKey);
      print('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: $e');
    }
  }

  // ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  static Future<void> debugStorage() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      print('üîë –í—Å–µ –∫–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: $keys');

      for (final key in keys) {
        final value = prefs.getString(key);
        print('   $key: ${value?.substring(0, value.length > 100 ? 100 : value.length)}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: $e');
    }
  }
}