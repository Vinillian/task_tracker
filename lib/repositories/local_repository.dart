import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:hive/hive.dart';
import 'package:path_provider/path_provider.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/app_user.dart';
import '../models/project.dart';
import '../models/task.dart';
import '../models/progress_history.dart';
import '../models/step.dart';
import '../models/stage.dart';
import '../models/recurrence_completion.dart'; // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£

class LocalRepository {
  static const String _userBoxName = 'userData';
  static const String _settingsBoxName = 'settings';

  late Box<AppUser> _userBox;
  late Box<dynamic> _settingsBox;
  bool _isInitialized = false;

  Future<void> init() async {
    if (_isInitialized) return;

    try {
      print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Web –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      if (kIsWeb) {
        await Hive.initFlutter();
      } else {
        final appDocDir = await getApplicationDocumentsDirectory();
        Hive.init(appDocDir.path);
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
      _registerAdapters();

      // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –±–æ–∫—Å—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      try {
        _userBox = await Hive.openBox<AppUser>(_userBoxName);
        _settingsBox = await Hive.openBox(_settingsBoxName);
        print('‚úÖ –ë–æ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã');
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫—Å–æ–≤: $e. –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        await clearCorruptedData();
      }

      _isInitialized = true;
      print('‚úÖ Hive initialized successfully');
    } catch (e, stack) {
      print('‚ùå Critical error initializing Hive: $e');
      print('Stack trace: $stack');

      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      await Future.delayed(Duration(seconds: 1));
      await _tryRecovery();
    }
  }

  void _registerAdapters() {
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(AppUserAdapter());
    }
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(ProjectAdapter());
    }
    if (!Hive.isAdapterRegistered(2)) {
      Hive.registerAdapter(TaskAdapter());
    }
    if (!Hive.isAdapterRegistered(3)) {
      Hive.registerAdapter(StepAdapter());
    }
    if (!Hive.isAdapterRegistered(8)) { // –ò–∑–º–µ–Ω–∏—Ç–µ —Å 7 –Ω–∞ 8
      Hive.registerAdapter(StageAdapter());
    }
    if (!Hive.isAdapterRegistered(4)) {
      Hive.registerAdapter(ProgressHistoryAdapter());
    }
    if (!Hive.isAdapterRegistered(9)) { // –ò–∑–º–µ–Ω–∏—Ç–µ —Å 8 –Ω–∞ 9
      Hive.registerAdapter(RecurrenceCompletionAdapter());
    }
    print('‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  }

  Future<void> _tryRecovery() async {
    try {
      print('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
      await Hive.close();

      if (kIsWeb) {
        await Hive.initFlutter();
      } else {
        final appDocDir = await getApplicationDocumentsDirectory();
        Hive.init(appDocDir.path);
      }

      _registerAdapters();

      // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞
      _userBox = await Hive.openBox<AppUser>(_userBoxName);
      _settingsBox = await Hive.openBox(_settingsBoxName);

      _isInitialized = true;
      print('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: $e');
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –±–æ–∫—Å—ã –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      try {
        _userBox = await Hive.openBox<AppUser>('userData_memory');
        _settingsBox = await Hive.openBox('settings_memory');
        _isInitialized = true;
        print('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –±–æ–∫—Å—ã –≤ –ø–∞–º—è—Ç–∏');
      } catch (e) {
        print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
        rethrow;
      }
    }
  }

  Future<void> clearCorruptedData() async {
    try {
      print('üîÑ –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ–∫—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
      try {
        await _userBox.close();
        await _settingsBox.close();
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫—Å–æ–≤: $e');
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
      if (!kIsWeb) {
        try {
          final appDocDir = await getApplicationDocumentsDirectory();
          final userBoxFile = File('${appDocDir.path}/userData.hive');
          final settingsBoxFile = File('${appDocDir.path}/settings.hive');
          final userBoxLockFile = File('${appDocDir.path}/userData.lock');
          final settingsBoxLockFile = File('${appDocDir.path}/settings.lock');

          if (await userBoxFile.exists()) {
            await userBoxFile.delete();
            print('‚úÖ –£–¥–∞–ª–µ–Ω userData.hive');
          }
          if (await settingsBoxFile.exists()) {
            await settingsBoxFile.delete();
            print('‚úÖ –£–¥–∞–ª–µ–Ω settings.hive');
          }
          if (await userBoxLockFile.exists()) {
            await userBoxLockFile.delete();
            print('‚úÖ –£–¥–∞–ª–µ–Ω userData.lock');
          }
          if (await settingsBoxLockFile.exists()) {
            await settingsBoxLockFile.delete();
            print('‚úÖ –£–¥–∞–ª–µ–Ω settings.lock');
          }
        } catch (e) {
          print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: $e');
        }
      }

      // –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫—Å—ã
      _userBox = await Hive.openBox<AppUser>(_userBoxName);
      _settingsBox = await Hive.openBox(_settingsBoxName);

      print('‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> saveUser(AppUser user) async {
    try {
      await _userBox.put('currentUser', user);
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Hive: ${user.username}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Hive: $e');
      rethrow;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  AppUser? loadUser() {
    try {
      return _userBox.get('currentUser');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
  Future<String> exportToJson() async {
    final user = loadUser();
    if (user == null) {
      throw Exception('No user data to export');
    }

    final jsonMap = _convertToJsonCompatible(user.toFirestore());
    final jsonEncoder = JsonEncoder.withIndent('  ');
    return jsonEncoder.convert(jsonMap);
  }

  Map<String, dynamic> _convertToJsonCompatible(Map<String, dynamic> data) {
    final result = Map<String, dynamic>.from(data);

    result.forEach((key, value) {
      if (value is Timestamp) {
        result[key] = value.toDate().toIso8601String();
      } else if (value is Map<String, dynamic>) {
        result[key] = _convertToJsonCompatible(value);
      } else if (value is List) {
        result[key] = value.map((item) {
          if (item is Timestamp) {
            return item.toDate().toIso8601String();
          } else if (item is Map<String, dynamic>) {
            return _convertToJsonCompatible(item);
          }
          return item;
        }).toList();
      }
    });

    return result;
  }

  // –ò–º–ø–æ—Ä—Ç –∏–∑ JSON
  Future<AppUser> importFromJson(String jsonString) async {
    print('üîÑ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ JSON, –¥–ª–∏–Ω–∞: ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤');

    try {
      final cleanedJsonString = jsonString.trim();

      if (!cleanedJsonString.startsWith('{') || !cleanedJsonString.endsWith('}')) {
        throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞');
      }

      final jsonMap = jsonDecode(cleanedJsonString) as Map<String, dynamic>;

      if (jsonMap['username'] == null) {
        throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ username');
      }
      if (jsonMap['email'] == null) {
        throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ email');
      }

      final user = AppUser.fromFirestore(jsonMap);
      await saveUser(user);

      print('‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: ${user.username}, –ø—Ä–æ–µ–∫—Ç–æ–≤: ${user.projects.length}');
      return user;

    } on FormatException catch (e) {
      throw Exception('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: $e');
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: $e');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearAllData() async {
    await _userBox.clear();
    await _settingsBox.clear();
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫—Å–æ–≤
  Future<void> close() async {
    await _userBox.close();
    await _settingsBox.close();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  Future<bool> checkAndRecoverData() async {
    try {
      final user = loadUser();
      if (user == null || user.projects.isEmpty) {
        print('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
        final backup = await _checkForBackup();
        if (backup != null) {
          print('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
          await saveUser(backup);
          return true;
        }
        return false;
      }
      return true;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      return false;
    }
  }

  Future<AppUser?> _checkForBackup() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Hive
      if (!Hive.isBoxOpen('userData') && !Hive.isAdapterRegistered(0)) {
        print('‚ö†Ô∏è Hive –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
        return null;
      }

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ–∫—Å–æ–≤
      final appDocDir = await getApplicationDocumentsDirectory();
      final hiveDir = Directory(appDocDir.path);

      if (!await hiveDir.exists()) {
        print('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Hive –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return null;
      }

      final files = await hiveDir.list().toList();
      final boxNames = files
          .where((file) => file.path.endsWith('.hive'))
          .map((file) => file.uri.pathSegments.last.replaceAll('.hive', ''))
          .toList();

      print('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–∫—Å—ã: $boxNames');

      for (final boxName in boxNames) {
        if (boxName.contains('backup') || boxName.contains('user')) {
          print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–∫—Å: $boxName');
          try {
            final box = await Hive.openBox(boxName);
            final data = box.get('userBackup');
            if (data != null && data is AppUser) {
              print('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤ –±–æ–∫—Å–µ $boxName');
              await box.close();
              return data;
            }
            await box.close();
          } catch (e) {
            print('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ–∫—Å—É $boxName: $e');
          }
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $e');
    }
    return null;
  }
}