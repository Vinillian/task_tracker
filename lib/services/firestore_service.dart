import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/app_user.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  CollectionReference get _usersRef => _firestore.collection('users');

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
  Future<void> saveUser(AppUser user, String uid) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ toFirestore() –∏–∑ –º–æ–¥–µ–ª–∏ AppUser
      final userData = user.toFirestore();

      await _usersRef.doc(uid).set(userData, SetOptions(merge: true));
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore (UID: $uid)');
      print('üìä –î–∞–Ω–Ω—ã–µ: ${userData.toString()}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
  Future<DocumentSnapshot> getUserDocument(String uid) async {
    try {
      final doc = await _usersRef.doc(uid).get();
      print('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${doc.exists ? "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" : "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}');
      return doc;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: $e');
      rethrow;
    }
  }

  // Stream –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
  Stream<AppUser?> userStream(String uid) {
    return _usersRef.doc(uid).snapshots().map((snapshot) {
      if (snapshot.exists) {
        print('üîÑ Stream: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        return AppUser.fromFirestore(snapshot.data() as Map<String, dynamic>);
      }
      print('üîÑ Stream: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return null;
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
  Future<void> deleteUser(String uid) async {
    try {
      await _usersRef.doc(uid).delete();
      print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID: $uid —É–¥–∞–ª–µ–Ω –∏–∑ Firestore');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      rethrow;
    }
  }

  // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  Stream<List<AppUser>> usersStream() {
    return _usersRef.snapshots().map((snapshot) {
      return snapshot.docs
          .map((doc) => AppUser.fromFirestore(doc.data() as Map<String, dynamic>))
          .toList();
    });
  }
}