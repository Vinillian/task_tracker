import '../models/task.dart';
import '../models/stage.dart';
import '../models/step.dart' as custom_step;
import '../models/progress_history.dart';
import '../services/task_service.dart';
import '../services/recurrence_service.dart';
import '../models/recurrence.dart';

class CompletionService {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  static Map<String, dynamic> completeItem(
      dynamic item, {
        required int stepsAdded,
        required String itemName,
        required String itemType,
      }) {
    dynamic updatedItem;
    int actualSteps = stepsAdded;

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    if (item is Task) {
      if (item.taskType == "singleStep") {
        updatedItem = TaskService.toggleTaskCompletion(item);
        actualSteps = updatedItem.isCompleted ? 1 : -1;
      } else {
        updatedItem = TaskService.addProgressToTask(item, stepsAdded);
      }
    } else if (item is Stage) {
      if (item.stageType == "singleStep") {
        updatedItem = TaskService.toggleStageCompletion(item);
        actualSteps = updatedItem.isCompleted ? 1 : -1;
      } else {
        updatedItem = TaskService.addProgressToStage(item, stepsAdded);
      }
    } else if (item is custom_step.Step) {
      if (item.stepType == "singleStep") {
        updatedItem = TaskService.toggleStepCompletion(item);
        actualSteps = updatedItem.isCompleted ? 1 : -1;
      } else {
        updatedItem = TaskService.addProgressToStep(item, stepsAdded);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    final progressHistory = ProgressHistory(
      date: DateTime.now(),
      itemName: itemName,
      stepsAdded: actualSteps,
      itemType: itemType,
    );

    return {
      'updatedItem': updatedItem,
      'progressHistory': progressHistory,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  static String getItemType(dynamic item) {
    if (item is Task) return 'task';
    if (item is Stage) return 'stage';
    if (item is custom_step.Step) return 'step';
    return 'unknown';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  static String getItemName(dynamic item) {
    return item.name;
  }

  static Map<String, dynamic> completeItemWithHistory({
    required dynamic item,
    required int stepsAdded,
    required String itemName,
    required String itemType,
    required List<dynamic> currentHistory,
  }) {
    final result = completeItem(
      item,
      stepsAdded: stepsAdded,
      itemName: itemName,
      itemType: itemType,
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (result['progressHistory'].stepsAdded != 0) {
      final updatedHistory = List<dynamic>.from(currentHistory)
        ..add(result['progressHistory']);

      return {
        'updatedItem': result['updatedItem'],
        'updatedHistory': updatedHistory,
      };
    }

    return {
      'updatedItem': result['updatedItem'],
      'updatedHistory': currentHistory,
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º daily –∑–∞–¥–∞—á
  // –í lib/services/completion_service.dart
  // –í lib/services/completion_service.dart
  static Map<String, dynamic> completeItemWithAutoMove({
    required dynamic item,
    required int stepsAdded,
    required String itemName,
    required String itemType,
    required List<dynamic> currentHistory,
  }) {
    final result = completeItemWithHistory(
      item: item,
      stepsAdded: stepsAdded,
      itemName: itemName,
      itemType: itemType,
      currentHistory: currentHistory,
    );

    // –î–ª—è recurring –∑–∞–¥–∞—á —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
    final updatedItem = _handleRecurringItemCompletion(result['updatedItem']);

    return {
      'updatedItem': updatedItem,
      'updatedHistory': result['updatedHistory'],
    };
  }

  static dynamic _handleRecurringItemCompletion(dynamic item) {
    // –î–ª—è recurring –∑–∞–¥–∞—á —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
    if (item is Task && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π occurrence
      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2, // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π occurrence –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        ).elementAt(1); // –ü–µ—Ä–≤—ã–π - —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π, –≤—Ç–æ—Ä–æ–π - —Å–ª–µ–¥—É—é—â–∏–π

        print('üîÑ –ü–µ—Ä–µ–Ω–æ—Å recurring –∑–∞–¥–∞—á–∏ "${item.name}" —Å ${item.plannedDate} –Ω–∞ $nextDate');

        return Task(
          name: item.name,
          completedSteps: 0, // –°–ë–†–ê–°–´–í–ê–ï–ú –ü–†–û–ì–†–ï–°–°
          totalSteps: item.totalSteps,
          stages: item.stages.map((stage) => _resetStageProgress(stage)).toList(), // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–æ–≤
          taskType: item.taskType,
          recurrence: item.recurrence,
          dueDate: item.dueDate,
          isCompleted: false, // –°–ë–†–ê–°–´–í–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï
          description: item.description,
          plannedDate: nextDate, // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
          colorValue: item.colorValue,
          isTracked: item.isTracked,
        );
      }
    }

    if (item is Stage && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2,
        ).elementAt(1);

        return Stage(
          name: item.name,
          completedSteps: 0, // –°–ë–†–ê–°–´–í–ê–ï–ú –ü–†–û–ì–†–ï–°–°
          totalSteps: item.totalSteps,
          stageType: item.stageType,
          isCompleted: false, // –°–ë–†–ê–°–´–í–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï
          steps: item.steps.map((step) => _resetStepProgress(step)).toList(), // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–≥–æ–≤
          plannedDate: nextDate,
          recurrence: item.recurrence,
        );
      }
    }

    if (item is custom_step.Step && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2,
        ).elementAt(1);

        return custom_step.Step(
          name: item.name,
          completedSteps: 0, // –°–ë–†–ê–°–´–í–ê–ï–ú –ü–†–û–ì–†–ï–°–°
          totalSteps: item.totalSteps,
          stepType: item.stepType,
          isCompleted: false, // –°–ë–†–ê–°–´–í–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï
          plannedDate: nextDate,
          recurrence: item.recurrence,
        );
      }
    }

    // –î–ª—è –Ω–µ-recurring –∑–∞–¥–∞—á –∏–ª–∏ –∑–∞–¥–∞—á –Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return item;
  }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  static Stage _resetStageProgress(Stage stage) {
    return Stage(
      name: stage.name,
      completedSteps: 0,
      totalSteps: stage.totalSteps,
      stageType: stage.stageType,
      isCompleted: false,
      steps: stage.steps.map((step) => _resetStepProgress(step)).toList(),
      plannedDate: stage.plannedDate,
      recurrence: stage.recurrence,
    );
  }

  static custom_step.Step _resetStepProgress(custom_step.Step step) {
    return custom_step.Step(
      name: step.name,
      completedSteps: 0,
      totalSteps: step.totalSteps,
      stepType: step.stepType,
      isCompleted: false,
      plannedDate: step.plannedDate,
      recurrence: step.recurrence,
    );
  }

  static dynamic _handleRecurringItemCompletion(dynamic item) {
    // –î–ª—è recurring –∑–∞–¥–∞—á —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
    if (item is Task && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π occurrence
      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2, // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π occurrence –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        ).elementAt(1); // –ü–µ—Ä–≤—ã–π - —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π, –≤—Ç–æ—Ä–æ–π - —Å–ª–µ–¥—É—é—â–∏–π

        print('üîÑ –ü–µ—Ä–µ–Ω–æ—Å recurring –∑–∞–¥–∞—á–∏ "${item.name}" —Å ${item.plannedDate} –Ω–∞ $nextDate');

        return Task(
          name: item.name,
          completedSteps: 0,
          totalSteps: item.totalSteps,
          stages: item.stages,
          taskType: item.taskType,
          recurrence: item.recurrence,
          dueDate: item.dueDate,
          isCompleted: false,
          description: item.description,
          plannedDate: nextDate, // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
          colorValue: item.colorValue,
          isTracked: item.isTracked,
        );
      }
    }

    if (item is Stage && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2,
        ).elementAt(1);

        return Stage(
          name: item.name,
          completedSteps: 0,
          totalSteps: item.totalSteps,
          stageType: item.stageType,
          isCompleted: false,
          steps: item.steps,
          plannedDate: nextDate,
          recurrence: item.recurrence,
        );
      }
    }

    if (item is custom_step.Step && item.recurrence != null && item.plannedDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final plannedDay = DateTime(item.plannedDate!.year, item.plannedDate!.month, item.plannedDate!.day);

      if (plannedDay.isAtSameMomentAs(today)) {
        final nextDate = RecurrenceService.generateOccurrences(
          recurrence: item.recurrence!,
          startDate: item.plannedDate!,
          count: 2,
        ).elementAt(1);

        return custom_step.Step(
          name: item.name,
          completedSteps: 0,
          totalSteps: item.totalSteps,
          stepType: item.stepType,
          isCompleted: false,
          plannedDate: nextDate,
          recurrence: item.recurrence,
        );
      }
    }

    // –î–ª—è –Ω–µ-recurring –∑–∞–¥–∞—á –∏–ª–∏ –∑–∞–¥–∞—á –Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return item;
  }
}